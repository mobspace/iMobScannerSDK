// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 effective-4.2 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -O -module-name MobScannerSDK
import AVFoundation
import CommonCrypto
import Foundation
@_exported import MobScannerSDK
import ObjectiveC
import PDFKit
import Photos
import Swift
import UIKit
import Vision
@_inheritsConvenienceInitializers @objc public class ImageFilterViewController : MobScannerSDK.BaseViewController, MobScannerSDK.FilterOptionDelegate {
  public func onFilterSelected(filterName: Swift.String, filteredImage: UIKit.UIImage)
  public func getOriginalImage() -> UIKit.UIImage
  public var croppedImage: UIKit.UIImage
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension UIImage {
  public func rotate(degrees: Swift.Float) -> UIKit.UIImage?
}
public protocol TatsiColors {
  var background: UIKit.UIColor { get }
  var link: UIKit.UIColor { get }
  var label: UIKit.UIColor { get }
  var secondaryLabel: UIKit.UIColor { get }
  var checkMark: UIKit.UIColor? { get }
}
extension TatsiColors {
  public var checkMark: UIKit.UIColor? {
    get
  }
}
public struct TatsiDefaultColors : MobScannerSDK.TatsiColors {
  public var background: UIKit.UIColor
  public var link: UIKit.UIColor
  public let label: UIKit.UIColor
  public let secondaryLabel: UIKit.UIColor
}
extension UIColor {
  convenience public init(argb: Swift.UInt)
  convenience public init(rgb: Swift.UInt)
}
public protocol FilterOptionDelegate {
  func onFilterSelected(filterName: Swift.String, filteredImage: UIKit.UIImage)
  func getOriginalImage() -> UIKit.UIImage
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FilterOptionList : UIKit.UIView, MobScannerSDK.CardViewListDelegete {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  public func cardView(_ scrollView: UIKit.UIScrollView, didSelectCardView cardView: UIKit.UIView, identifierCards identifier: Swift.String, index: Swift.Int)
  public func setUp(delegate: MobScannerSDK.FilterOptionDelegate)
  @objc deinit
}
open class CardViewAnimation {
  public init()
  open func scale(to: CoreGraphics.CGFloat, view: UIKit.UIView)
  open func scaleShow(view: UIKit.UIView)
  open func scaleShowBounce(view: UIKit.UIView)
  open func bounce(view: UIKit.UIView)
  open func bounce(view: UIKit.UIView, completion: @escaping () -> ())
  open func transformToRight(view: UIKit.UIView)
  open func transformToBottom(view: UIKit.UIView)
  open func transformToTop(view: UIKit.UIView)
  open func transformToLeft(view: UIKit.UIView)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MobScannerSDK {
  public static func setTheme(theme: MobScannerSDK.SDKColors)
  public static func isInitialized() -> Swift.Bool
  public static func initialize(uuid: Swift.String, apiKey: Swift.String, initCallBack: MobScannerSDK.SDKInitDelegate)
  public static func getSDKVersion() -> Swift.String
  @objc deinit
}
public enum PDFSize {
  case A4, A3, LETTER
  public static func == (a: MobScannerSDK.PDFSize, b: MobScannerSDK.PDFSize) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class PDFSettings {
  public init()
  public var pdfSize: MobScannerSDK.PDFSize
  public var applyMargin: Swift.Bool
  public var imageQuality: Swift.Double
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FilterCardView : UIKit.UIView {
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  public var filterName: MobScannerSDK.FilterTypes
  public var isSelected: Swift.Bool {
    get
    set
  }
  public func setUp(previewImg: UIKit.UIImage)
  @objc deinit
}
@_hasMissingDesignatedInitializers @objc final public class DeviceImagerPicker : MobScannerSDK.TatsiPickerViewController, MobScannerSDK.TatsiPickerViewControllerDelegate {
  final public var inputImagePickerDelegate: MobScannerSDK.InputImagePickerDelegate?
  public init(numberOfSelection: Swift.Int)
  final public func pickerViewController(_ pickerViewController: MobScannerSDK.TatsiPickerViewController, didPickAssets assets: [Photos.PHAsset])
  @objc deinit
  override public init(config: MobScannerSDK.TatsiConfig = super)
}
@objc @_inheritsConvenienceInitializers public class CropView : UIKit.UIView {
  public var rectangleBorderColor: UIKit.UIColor
  public var rectangleFillColor: UIKit.UIColor
  public var circleBorderColor: UIKit.UIColor
  public var circleBackgroundColor: UIKit.UIColor
  public var selectedCircleBorderColor: UIKit.UIColor
  public var selectedCircleBackgroundColor: UIKit.UIColor
  public var rectangleBorderWidth: CoreGraphics.CGFloat
  public var circleBorderWidth: CoreGraphics.CGFloat
  public var circleBorderRadius: CoreGraphics.CGFloat
  public var circleAlpha: CoreGraphics.CGFloat
  public var rectangleAlpha: CoreGraphics.CGFloat
  public func setUpImage(image: UIKit.UIImage, screenSize: CoreGraphics.CGSize = UIScreen.main.bounds.size)
  public func rotateImage(angle: Swift.Float)
  public func reloadImage(screenSize: CoreGraphics.CGSize)
  public func cropAndTransform(completionHandler: @escaping (UIKit.UIImage) -> Swift.Void)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers @objc public class CropViewController : MobScannerSDK.BaseViewController {
  public var outputFolder: Swift.String?
  public var imgFiles: [Swift.String]
  public var documentReadyDelegate: MobScannerSDK.DocumentReadyDelegate?
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension DispatchQueue {
  public static func background<T>(background: (() -> T)? = nil, completion: ((T?) -> Swift.Void)? = nil)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class CameraView : UIKit.UIView, AVFoundation.AVCapturePhotoCaptureDelegate {
  public func startCamera(delegate: MobScannerSDK.CameraDelegate)
  public func stopCamera()
  public func onResize(newSize: CoreGraphics.CGSize)
  @objc override dynamic public func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  public func capture()
  @objc public func photoOutput(_ output: AVFoundation.AVCapturePhotoOutput, didFinishProcessingPhoto photo: AVFoundation.AVCapturePhoto, error: Swift.Error?)
  public func updateFlashMode(flasMode: MobScannerSDK.FlashModes)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MSSDKCore {
  public static func getTransformedImage(newWidth: CoreGraphics.CGFloat, newHeight: CoreGraphics.CGFloat, origImage: UIKit.UIImage, corners: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>!, size: CoreGraphics.CGSize, callback: @escaping ((UIKit.UIImage?) -> ()))
  public static func getLargestSquarePoints(image: UIKit.UIImage, frameSize: CoreGraphics.CGSize, callback: @escaping ((Foundation.NSMutableArray?) -> ()))
  public static func applyFilter(filterType: MobScannerSDK.FilterTypes, image: UIKit.UIImage, callback: @escaping ((UIKit.UIImage?) -> ()))
  @objc deinit
}
public struct TatsiConfig {
  public static let `default`: MobScannerSDK.TatsiConfig
  public enum StartView {
    case userLibrary
    case albums
    case album(Photos.PHAssetCollection)
  }
  public var colors: MobScannerSDK.TatsiColors
  public var supportedMediaTypes: Swift.Set<Photos.PHAssetMediaType>
  public var supportedMediaSubTypes: [Photos.PHAssetMediaSubtype]?
  public var showCameraOption: Swift.Bool
  public var maxNumberOfSelections: Swift.Int?
  public var showRecentlyDeletedAlbum: Swift.Bool
  public var showHiddenAlbum: Swift.Bool
  public var showRecentlyAddedAlbum: Swift.Bool
  public var showEmptyAlbums: Swift.Bool
  public var showSharedAlbums: Swift.Bool
  public var singleViewMode: Swift.Bool
  public var firstView: MobScannerSDK.TatsiConfig.StartView
  public var numberOfColumns: Swift.Int?
  public var invertUserLibraryOrder: Swift.Bool
  public var finishImmediatelyWithMaximumOfOne: Swift.Bool
  public var preferredStatusBarStyle: UIKit.UIStatusBarStyle
  public var localizableStringsTableName: Swift.String? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class BaseViewController : UIKit.UIViewController {
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic open var preferredInterfaceOrientationForPresentation: UIKit.UIInterfaceOrientation {
    @objc get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension CardViewListDelegete {
  public func cardView(willDisplay scrollView: UIKit.UIScrollView, identifierCards identifier: Swift.String)
  public func cardView(_ scrollView: UIKit.UIScrollView, willAttachCardView cardView: UIKit.UIView, identifierCards identifier: Swift.String, index: Swift.Int)
  public func cardView(_ scrollView: UIKit.UIScrollView, willAttachCardViewController cardViewController: UIKit.UIViewController, identifierCards identifier: Swift.String, index: Swift.Int)
  public func cardView(_ scrollView: UIKit.UIScrollView, didFinishDisplayCardViews cardViews: [UIKit.UIView], identifierCards identifier: Swift.String)
  public func cardView(_ scrollView: UIKit.UIScrollView, didFinishDisplayCardViewControllers cardViewsController: [UIKit.UIViewController], identifierCards identifier: Swift.String)
  public func cardView(_ scrollView: UIKit.UIScrollView, didSelectCardView cardView: UIKit.UIView, identifierCards identifier: Swift.String, index: Swift.Int)
}
public protocol CardViewListDelegete : AnyObject {
  func cardView(_ scrollView: UIKit.UIScrollView, willAttachCardView cardView: UIKit.UIView, identifierCards identifier: Swift.String, index: Swift.Int)
  func cardView(_ scrollView: UIKit.UIScrollView, willAttachCardViewController cardViewController: UIKit.UIViewController, identifierCards identifier: Swift.String, index: Swift.Int)
  func cardView(_ scrollView: UIKit.UIScrollView, didSelectCardView cardView: UIKit.UIView, identifierCards identifier: Swift.String, index: Swift.Int)
  func cardView(willDisplay scrollView: UIKit.UIScrollView, identifierCards identifier: Swift.String)
  func cardView(_ scrollView: UIKit.UIScrollView, didFinishDisplayCardViews cardViews: [UIKit.UIView], identifierCards identifier: Swift.String)
  func cardView(_ scrollView: UIKit.UIScrollView, didFinishDisplayCardViewControllers cardViewsController: [UIKit.UIViewController], identifierCards identifier: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class CardViewList : ObjectiveC.NSObject, UIKit.UIScrollViewDelegate {
  public enum ListType {
    case horizontal
    case vertical
    public static func == (a: MobScannerSDK.CardViewList.ListType, b: MobScannerSDK.CardViewList.ListType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum CardSizeType {
    case autoSize
    case square
    case circle
    public static func == (a: MobScannerSDK.CardViewList.CardSizeType, b: MobScannerSDK.CardViewList.CardSizeType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public enum AnimationScroll : Swift.String {
    case none
    case scaleBounce
    case transformToRight
    case transformToLeft
    case transformToBottom
    case transformToTop
    public typealias RawValue = Swift.String
    public init?(rawValue: Swift.String)
    public var rawValue: Swift.String {
      get
    }
  }
  public enum ClickAnimation {
    case none
    case bounce
    public static func == (a: MobScannerSDK.CardViewList.ClickAnimation, b: MobScannerSDK.CardViewList.ClickAnimation) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  open var isShadowEnable: Swift.Bool
  open var isClickable: Swift.Bool
  open var isMultipleTouch: Swift.Bool
  open var cornerRadius: CoreGraphics.CGFloat
  open var shadowSize: CoreGraphics.CGFloat
  open var shadowOpacity: Swift.Float
  open var shadowColor: UIKit.UIColor
  open var margin: CoreGraphics.CGFloat
  open var marginCards: CoreGraphics.CGFloat
  open var listType: MobScannerSDK.CardViewList.ListType
  open var grid: Swift.Int
  open var cardSizeType: MobScannerSDK.CardViewList.CardSizeType
  open var maxWidth: CoreGraphics.CGFloat
  open var maxHeight: CoreGraphics.CGFloat
  open var animationScroll: MobScannerSDK.CardViewList.AnimationScroll
  open var clickAnimation: MobScannerSDK.CardViewList.ClickAnimation
  open var delegete: MobScannerSDK.CardViewListDelegete!
  @objc override dynamic public init()
  open func generateCardViewList(containerView: UIKit.UIView, viewControllers: [UIKit.UIViewController], listType: MobScannerSDK.CardViewList.ListType, identifier: Swift.String)
  open func generateCardViewList(containerView: UIKit.UIView, views: [UIKit.UIView], listType: MobScannerSDK.CardViewList.ListType, identifier: Swift.String)
  @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  public func getAllViews() -> [UIKit.UIView]
  @objc deinit
}
@objc public protocol BEMCheckBoxDelegate : ObjectiveC.NSObjectProtocol {
  @objc optional func didTap(_ checkBox: MobScannerSDK.BEMCheckBox)
  @objc optional func animationDidStop(for checkBox: MobScannerSDK.BEMCheckBox)
}
@_inheritsConvenienceInitializers @IBDesignable @objc public class BEMCheckBox : UIKit.UIControl, QuartzCore.CAAnimationDelegate {
  @objc(BEMBoxType) public enum BoxType : Swift.Int {
    case circle
    case square
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc(BEMAnimationType) public enum AnimationType : Swift.Int {
    case stroke
    case fill
    case bounce
    case flat
    case oneStroke
    case fade
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @IBOutlet weak public var delegate: MobScannerSDK.BEMCheckBoxDelegate?
  @objc @IBInspectable public var on: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var boxType: MobScannerSDK.BEMCheckBox.BoxType {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var lineWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var cornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var animationDuration: CoreFoundation.CFTimeInterval {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var hideBox: Swift.Bool
  @objc @IBInspectable public var onTintColor: UIKit.UIColor?
  @objc @IBInspectable public var onFillColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var offFillColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var onCheckColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc public var group: MobScannerSDK.BEMCheckBoxGroup?
  @objc public var onAnimationType: MobScannerSDK.BEMCheckBox.AnimationType
  @objc public var offAnimationType: MobScannerSDK.BEMCheckBox.AnimationType
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public var frame: CoreGraphics.CGRect {
    @objc get
    @objc set
  }
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc public func setOn(_ on: Swift.Bool, animated: Swift.Bool = false)
  @objc override dynamic public func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc public func animationDidStop(_ anim: QuartzCore.CAAnimation, finished flag: Swift.Bool)
  @objc deinit
}
public enum FilterTypes : Swift.String, Swift.CaseIterable {
  case none
  case Auto
  case Magic
  case Gray
  case BW1
  case BW2
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [MobScannerSDK.FilterTypes]
  public static var allCases: [MobScannerSDK.FilterTypes] {
    get
  }
  public init?(rawValue: Swift.String)
}
public protocol InputImagePickerDelegate {
  func onInputImagePicked(images: [Swift.String])
}
public protocol DocumentReadyDelegate {
  func onDocumentReady(outputImgFiles: [Swift.String])
  func onUserCancelled()
}
public protocol SDKInitDelegate {
  func onInitSuccess()
  func onInitError(message: Swift.String)
}
public enum SDKErrors : Foundation.LocalizedError {
  case NOT_INITIALIZED
  public static func == (a: MobScannerSDK.SDKErrors, b: MobScannerSDK.SDKErrors) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol CameraDelegate {
  func onImageCaptured(image: UIKit.UIImage?)
  func onError(errorMessage: Swift.String)
}
public enum FlashModes {
  case auto, on, off
  public static func == (a: MobScannerSDK.FlashModes, b: MobScannerSDK.FlashModes) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol TatsiPickerViewControllerDelegate : AnyObject {
  func pickerViewController(_ pickerViewController: MobScannerSDK.TatsiPickerViewController, didPickAssets assets: [Photos.PHAsset])
  func pickerViewController(_ pickerViewController: MobScannerSDK.TatsiPickerViewController, didSelectCollection collection: Photos.PHAssetCollection)
  func pickerViewControllerDidCancel(_ pickerViewController: MobScannerSDK.TatsiPickerViewController)
  func cancelBarButtonItem(for pickerViewController: MobScannerSDK.TatsiPickerViewController) -> UIKit.UIBarButtonItem?
  func doneBarButtonItem(for pickerViewController: MobScannerSDK.TatsiPickerViewController) -> UIKit.UIBarButtonItem?
}
extension TatsiPickerViewControllerDelegate {
  public func pickerViewController(_ pickerViewController: MobScannerSDK.TatsiPickerViewController, didSelectCollection collection: Photos.PHAssetCollection)
  public func pickerViewControllerDidCancel(_ pickerViewController: MobScannerSDK.TatsiPickerViewController)
  public func cancelBarButtonItem(for pickerViewController: MobScannerSDK.TatsiPickerViewController) -> UIKit.UIBarButtonItem?
  public func doneBarButtonItem(for pickerViewController: MobScannerSDK.TatsiPickerViewController) -> UIKit.UIBarButtonItem?
}
@objc final public class BEMAnimationManager : ObjectiveC.NSObject {
  @objc final public var animationDuration: CoreFoundation.CFTimeInterval
  @objc public init(animationDuration: CoreFoundation.CFTimeInterval)
  @objc final public func strokeAnimationReverse(_ reverse: Swift.Bool) -> QuartzCore.CABasicAnimation
  @objc final public func opacityAnimationReverse(_ reverse: Swift.Bool) -> QuartzCore.CABasicAnimation
  @objc final public func morphAnimation(from fromPath: UIKit.UIBezierPath?, to toPath: UIKit.UIBezierPath?) -> QuartzCore.CABasicAnimation
  @objc final public func fillAnimation(withBounces bounces: Swift.Int, amplitude: CoreGraphics.CGFloat, reverse: Swift.Bool) -> QuartzCore.CAKeyframeAnimation
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class CameraViewController : MobScannerSDK.BaseViewController, MobScannerSDK.CameraDelegate {
  public var currentFlashMode: MobScannerSDK.FlashModes
  public var showCapture: Swift.Bool
  public var isSingleShot: Swift.Bool
  public func onImageCaptured(image: UIKit.UIImage?)
  public func onError(errorMessage: Swift.String)
  public var inputImagePickerDelegate: MobScannerSDK.InputImagePickerDelegate?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc open class TatsiPickerViewController : UIKit.UINavigationController {
  final public let config: MobScannerSDK.TatsiConfig
  weak public var pickerDelegate: MobScannerSDK.TatsiPickerViewControllerDelegate?
  @objc override dynamic public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  public init(config: MobScannerSDK.TatsiConfig = TatsiConfig.default)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Img2Pdf {
  public static func createPDF(folderPath: Foundation.URL, jpegFiles: [Swift.String], outputFileName: Swift.String, callback: @escaping (((Foundation.URL?)?) -> ()))
  public static func createPDF(jpegFiles: [Swift.String], outputFileName: Swift.String, callback: @escaping (((Foundation.URL?)?) -> ()))
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ImagePreviewViewController : MobScannerSDK.BaseViewController {
  public var previewImage: UIKit.UIImage?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class BEMCheckBoxGroup : ObjectiveC.NSObject {
  @objc public var checkBoxes: Foundation.NSHashTable<MobScannerSDK.BEMCheckBox> {
    get
  }
  @objc public var selectedCheckBox: MobScannerSDK.BEMCheckBox? {
    @objc get
    @objc set
  }
  @objc public var mustHaveSelection: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc convenience public init(checkBoxes: [MobScannerSDK.BEMCheckBox])
  @objc public func contains(_ checkBox: MobScannerSDK.BEMCheckBox) -> Swift.Bool
  @objc public func addCheckBoxToGroup(_ checkBox: MobScannerSDK.BEMCheckBox)
  @objc public func removeCheckBoxFromGroup(_ checkBox: MobScannerSDK.BEMCheckBox)
  @objc deinit
}
public protocol SDKColors {
  var primaryColor: UIKit.UIColor { get }
  var label: UIKit.UIColor { get }
  var navBackgroundColor: UIKit.UIColor { get }
}
public struct SDKDefaultColors : MobScannerSDK.SDKColors {
  public var navBackgroundColor: UIKit.UIColor
  public var primaryColor: UIKit.UIColor
  public let label: UIKit.UIColor
}
extension MobScannerSDK.PDFSize : Swift.Equatable {}
extension MobScannerSDK.PDFSize : Swift.Hashable {}
extension MobScannerSDK.CardViewList.ListType : Swift.Equatable {}
extension MobScannerSDK.CardViewList.ListType : Swift.Hashable {}
extension MobScannerSDK.CardViewList.CardSizeType : Swift.Equatable {}
extension MobScannerSDK.CardViewList.CardSizeType : Swift.Hashable {}
extension MobScannerSDK.CardViewList.AnimationScroll : Swift.Equatable {}
extension MobScannerSDK.CardViewList.AnimationScroll : Swift.Hashable {}
extension MobScannerSDK.CardViewList.AnimationScroll : Swift.RawRepresentable {}
extension MobScannerSDK.CardViewList.ClickAnimation : Swift.Equatable {}
extension MobScannerSDK.CardViewList.ClickAnimation : Swift.Hashable {}
extension MobScannerSDK.BEMCheckBox.BoxType : Swift.Equatable {}
extension MobScannerSDK.BEMCheckBox.BoxType : Swift.Hashable {}
extension MobScannerSDK.BEMCheckBox.BoxType : Swift.RawRepresentable {}
extension MobScannerSDK.BEMCheckBox.AnimationType : Swift.Equatable {}
extension MobScannerSDK.BEMCheckBox.AnimationType : Swift.Hashable {}
extension MobScannerSDK.BEMCheckBox.AnimationType : Swift.RawRepresentable {}
extension MobScannerSDK.FilterTypes : Swift.Equatable {}
extension MobScannerSDK.FilterTypes : Swift.Hashable {}
extension MobScannerSDK.FilterTypes : Swift.RawRepresentable {}
extension MobScannerSDK.SDKErrors : Swift.Equatable {}
extension MobScannerSDK.SDKErrors : Swift.Hashable {}
extension MobScannerSDK.FlashModes : Swift.Equatable {}
extension MobScannerSDK.FlashModes : Swift.Hashable {}
